local Library = {}
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Mouse = Players.LocalPlayer:GetMouse()

local function PlaySound(soundId)
    for _, sound in pairs(workspace:GetChildren()) do
        if sound.Name == "LibrarySound" then
            sound:Destroy()
        end
    end
    
    local newSound = Instance.new("Sound")
    newSound.Name = "LibrarySound"
    newSound.Parent = workspace
    newSound.Volume = 0.5
    newSound.SoundId = soundId
    newSound:Play()
    
    newSound.Ended:Connect(function()
        newSound:Destroy()
    end)
end

-- Theme 
local Themes = {
    ["Dark"] = {
        Primary = Color3.fromRGB(32, 32, 32),
        Secondary = Color3.fromRGB(26, 26, 26), 
        Accent = Color3.fromRGB(176, 148, 255),
        Text = Color3.fromRGB(255, 255, 255),
        IsLight = false
    },
    
    ["Blood"] = {
        Primary = Color3.fromRGB(32, 32, 32),
        Secondary = Color3.fromRGB(26, 26, 26),
        Accent = Color3.fromRGB(138, 3, 3),
        Text = Color3.fromRGB(255, 255, 255),
        IsLight = false
    },
    
    ["Ocean"] = {
        Primary = Color3.fromRGB(32, 32, 32),
        Secondary = Color3.fromRGB(26, 26, 26),
        Accent = Color3.fromRGB(255, 0, 0),
        Text = Color3.fromRGB(255, 255, 255),
        IsLight = false
    },
    
    ["Emerald"] = {
        Primary = Color3.fromRGB(32, 32, 32),
        Secondary = Color3.fromRGB(26, 26, 26),
        Accent = Color3.fromRGB(68, 207, 108),
        Text = Color3.fromRGB(255, 255, 255),
        IsLight = false
    },
    
    ["Light"] = {
        Primary = Color3.fromRGB(245, 245, 245),
        Secondary = Color3.fromRGB(255, 255, 255),
        Accent = Color3.fromRGB(66, 135, 245),
        Text = Color3.fromRGB(32, 32, 32),
        IsLight = true
    }
}

-- Main Library Function
function Library:CreateWindow(windowName, themeName)
    windowName = windowName or "Modern GUI"
    themeName = themeName or "Dark"
    
    local currentTheme = Themes[themeName] or Themes["Dark"]
    
    -- Clean existing GUI
    for _, gui in pairs(game.CoreGui:GetChildren()) do
        if gui.Name == "ModernGUI" then
            gui:Destroy()
        end
    end
    
    -- Create Main GUI Structure
    local ScreenGui = Instance.new("ScreenGui")
    local MainFrame = Instance.new("Frame")
    local TopBar = Instance.new("Frame")
    local Title = Instance.new("TextLabel")
    local ToggleButton = Instance.new("TextButton")
    local ContentFrame = Instance.new("Frame")
    local TabContainer = Instance.new("Frame")
    local TabScroll = Instance.new("ScrollingFrame")
    local TabLayout = Instance.new("UIListLayout")
    local ItemContainer = Instance.new("Frame")
    
    -- Configure ScreenGui
    ScreenGui.Name = "ModernGUI"
    ScreenGui.Parent = game.CoreGui
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Main Frame Setup
    MainFrame.Name = "MainFrame"
    MainFrame.Parent = ScreenGui
    MainFrame.BackgroundColor3 = currentTheme.Primary
    MainFrame.BorderSizePixel = 0
    MainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
    MainFrame.Size = UDim2.new(0, 600, 0, 400)
    MainFrame.Active = true
    MainFrame.Draggable = true
    
    -- Add rounded corners
    local MainCorner = Instance.new("UICorner")
    MainCorner.CornerRadius = UDim.new(0, 8)
    MainCorner.Parent = MainFrame
    
    -- Top Bar
    TopBar.Name = "TopBar"
    TopBar.Parent = MainFrame
    TopBar.BackgroundColor3 = currentTheme.Secondary
    TopBar.BorderSizePixel = 0
    TopBar.Size = UDim2.new(1, 0, 0, 35)
    
    local TopCorner = Instance.new("UICorner")
    TopCorner.CornerRadius = UDim.new(0, 8)
    TopCorner.Parent = TopBar
    
    -- Title Label
    Title.Name = "Title"
    Title.Parent = TopBar
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 15, 0, 0)
    Title.Size = UDim2.new(1, -50, 1, 0)
    Title.Font = Enum.Font.SourceSansBold
    Title.Text = windowName
    Title.TextColor3 = currentTheme.Text
    Title.TextSize = 16
    Title.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Toggle Button
    ToggleButton.Name = "ToggleButton"
    ToggleButton.Parent = TopBar
    ToggleButton.BackgroundTransparency = 1
    ToggleButton.Position = UDim2.new(1, -35, 0, 5)
    ToggleButton.Size = UDim2.new(0, 25, 0, 25)
    ToggleButton.Font = Enum.Font.SourceSansBold
    ToggleButton.Text = "-"
    ToggleButton.TextColor3 = currentTheme.Text
    ToggleButton.TextSize = 18
    
    -- Content Frame
    ContentFrame.Name = "ContentFrame"
    ContentFrame.Parent = MainFrame
    ContentFrame.BackgroundTransparency = 1
    ContentFrame.Position = UDim2.new(0, 0, 0, 35)
    ContentFrame.Size = UDim2.new(1, 0, 1, -35)
    
TabContainer.Name = "TabContainer"
-- Tab Container
TabContainer.Name = "TabContainer"
TabContainer.Parent = ContentFrame
TabContainer.BackgroundColor3 = currentTheme.Secondary
TabContainer.BorderSizePixel = 0
TabContainer.Position = UDim2.new(0, 10, 0, 10)
TabContainer.Size = UDim2.new(0, 140, 1, -20) 
TabContainer.ClipsDescendants = false 

local TabCorner = Instance.new("UICorner")
TabCorner.CornerRadius = UDim.new(0, 6)
TabCorner.Parent = TabContainer

-- Tab Scroll
TabScroll.Name = "TabScroll"
TabScroll.Parent = TabContainer
TabScroll.BackgroundTransparency = 1
TabScroll.BorderSizePixel = 0
TabScroll.Position = UDim2.new(0, 5, 0, 5) 
TabScroll.Size = UDim2.new(1, -10, 1, -10)  
TabScroll.ScrollBarThickness = 3
TabScroll.ScrollBarImageColor3 = currentTheme.Accent
TabScroll.ScrollingDirection = Enum.ScrollingDirection.Y
TabScroll.CanvasSize = UDim2.new(0, 0, 0, 0)

    TabLayout.Parent = TabScroll
    TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabLayout.Padding = UDim.new(0, 5)
    
    -- Item Container
    ItemContainer.Name = "ItemContainer"
    ItemContainer.Parent = ContentFrame
    ItemContainer.BackgroundColor3 = currentTheme.Secondary
    ItemContainer.BorderSizePixel = 0
    ItemContainer.Position = UDim2.new(0, 170, 0, 10)
    ItemContainer.Size = UDim2.new(1, -180, 1, -20)
    
    local ItemCorner = Instance.new("UICorner")
    ItemCorner.CornerRadius = UDim.new(0, 6)
    ItemCorner.Parent = ItemContainer
    
    -- Toggle Functionality
    local isMinimized = false
    ToggleButton.MouseButton1Click:Connect(function()
        isMinimized = not isMinimized
        PlaySound("rbxassetid://131961136")
        
        if isMinimized then
            ContentFrame.Visible = false
            MainFrame.Size = UDim2.new(0, 600, 0, 35)
            ToggleButton.Text = "+"
        else
            ContentFrame.Visible = true
            MainFrame.Size = UDim2.new(0, 600, 0, 400)
            ToggleButton.Text = "-"
        end
    end)
    
    -- Window Object
    local WindowObject = {}
    
    function WindowObject:CreateTab(tabName)
        tabName = tabName or "New Tab"
        
        -- Create Tab Button
        local TabButton = Instance.new("TextButton")
        local TabFrame = Instance.new("ScrollingFrame")
        local ItemLayout = Instance.new("UIListLayout")
        
        TabButton.Name = tabName .. "Button"
        TabButton.Parent = TabScroll
        TabButton.BackgroundColor3 = currentTheme.Primary
        TabButton.BorderSizePixel = 0
        TabButton.Size = UDim2.new(1, -10, 0, 35)
        TabButton.Font = Enum.Font.SourceSansSemibold
        TabButton.Text = tabName
        TabButton.TextColor3 = currentTheme.Text
        TabButton.TextSize = 14
        
        local ButtonCorner = Instance.new("UICorner")
        ButtonCorner.CornerRadius = UDim.new(0, 4)
        ButtonCorner.Parent = TabButton
        
        -- Create Tab Content Frame
        TabFrame.Name = tabName .. "Frame"
        TabFrame.Parent = ItemContainer
        TabFrame.BackgroundTransparency = 1
        TabFrame.BorderSizePixel = 0
        TabFrame.Position = UDim2.new(0, -6, 0, 10)
        TabFrame.Size = UDim2.new(1, -20, 1, -20)
        TabFrame.ScrollBarThickness = 3
        TabFrame.ScrollBarImageColor3 = currentTheme.Accent
        TabFrame.ScrollingDirection = Enum.ScrollingDirection.Y
        TabFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabFrame.Visible = false
        
        -- Item Layout
        ItemLayout.Parent = TabFrame
        ItemLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ItemLayout.Padding = UDim.new(0, 8)
        
        -- Tab Button Click
        TabButton.MouseButton1Click:Connect(function()
            -- Hide all tabs
            for _, child in pairs(ItemContainer:GetChildren()) do
                if child:IsA("ScrollingFrame") then
                    child.Visible = false
                end
            end
            
            -- Reset all tab buttons
            for _, child in pairs(TabScroll:GetChildren()) do
                if child:IsA("TextButton") then
                    child.BackgroundColor3 = currentTheme.Primary
                    child.TextColor3 = currentTheme.Text
                end
            end
            
            -- Show current tab
            TabFrame.Visible = true
            TabButton.BackgroundColor3 = currentTheme.Accent
            TabButton.TextColor3 = currentTheme.IsLight and currentTheme.Primary or Color3.fromRGB(255, 255, 255)
            
            PlaySound("rbxassetid://131961136")
        end)
        
        -- Auto-update canvas size
        ItemLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabFrame.CanvasSize = UDim2.new(0, 0, 0, ItemLayout.AbsoluteContentSize.Y + 10)
        end)
        
        -- Tab Object
        local TabObject = {}
        
        function TabObject:CreateButton(buttonText, callback)
            buttonText = buttonText or "Button"
            callback = callback or function() end
            
            local Button = Instance.new("TextButton")
            Button.Name = "Button"
            Button.Parent = TabFrame
            Button.BackgroundColor3 = currentTheme.Primary
            Button.BorderSizePixel = 0
            Button.Size = UDim2.new(1, 0, 0, 35)
            Button.Font = Enum.Font.SourceSansSemibold
            Button.Text = buttonText
            Button.TextColor3 = currentTheme.Text
            Button.TextSize = 14
            
            local ButtonCorner = Instance.new("UICorner")
            ButtonCorner.CornerRadius = UDim.new(0, 4)
            ButtonCorner.Parent = Button
            
            Button.MouseButton1Click:Connect(function()
                PlaySound("rbxassetid://131961136")
                pcall(callback)
            end)
            
            -- Hover effect
            Button.MouseEnter:Connect(function()
                Button.BackgroundColor3 = currentTheme.Accent
            end)
            
            Button.MouseLeave:Connect(function()
                Button.BackgroundColor3 = currentTheme.Primary
            end)
        end
        
        function TabObject:CreateToggle(toggleText, defaultState, callback)
            toggleText = toggleText or "Toggle"
            defaultState = defaultState or false
            callback = callback or function() end
            
            local ToggleFrame = Instance.new("Frame")
            local ToggleLabel = Instance.new("TextLabel")
            local ToggleButton = Instance.new("TextButton")
            local ToggleIndicator = Instance.new("Frame")
            
            ToggleFrame.Name = "ToggleFrame"
            ToggleFrame.Parent = TabFrame
            ToggleFrame.BackgroundColor3 = currentTheme.Primary
            ToggleFrame.BorderSizePixel = 0
            ToggleFrame.Size = UDim2.new(1, 0, 0, 35)
            
            local ToggleCorner = Instance.new("UICorner")
            ToggleCorner.CornerRadius = UDim.new(0, 4)
            ToggleCorner.Parent = ToggleFrame
            
            ToggleLabel.Name = "Label"
            ToggleLabel.Parent = ToggleFrame
            ToggleLabel.BackgroundTransparency = 1
            ToggleLabel.Position = UDim2.new(0, 10, 0, 0)
            ToggleLabel.Size = UDim2.new(1, -60, 1, 0)
            ToggleLabel.Font = Enum.Font.SourceSansSemibold
            ToggleLabel.Text = toggleText
            ToggleLabel.TextColor3 = currentTheme.Text
            ToggleLabel.TextSize = 14
            ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            
            ToggleButton.Name = "Button"
            ToggleButton.Parent = ToggleFrame
            ToggleButton.BackgroundColor3 = currentTheme.Secondary
            ToggleButton.BorderSizePixel = 0
            ToggleButton.Position = UDim2.new(1, -45, 0.5, -10)
            ToggleButton.Size = UDim2.new(0, 35, 0, 20)
            ToggleButton.Text = ""
            
            local ToggleBtnCorner = Instance.new("UICorner")
            ToggleBtnCorner.CornerRadius = UDim.new(0, 10)
            ToggleBtnCorner.Parent = ToggleButton
            
            ToggleIndicator.Name = "Indicator"
            ToggleIndicator.Parent = ToggleButton
            ToggleIndicator.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
            ToggleIndicator.BorderSizePixel = 0
            ToggleIndicator.Position = UDim2.new(0, 2, 0, 2)
            ToggleIndicator.Size = UDim2.new(0, 16, 0, 16)
            
            local IndicatorCorner = Instance.new("UICorner")
            IndicatorCorner.CornerRadius = UDim.new(0, 8)
            IndicatorCorner.Parent = ToggleIndicator
            
            local isEnabled = defaultState
            
            local function UpdateToggle()
                if isEnabled then
                    ToggleButton.BackgroundColor3 = currentTheme.Accent
                    ToggleIndicator.Position = UDim2.new(1, -18, 0, 2)
                    ToggleIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                else
                    ToggleButton.BackgroundColor3 = currentTheme.Secondary
                    ToggleIndicator.Position = UDim2.new(0, 2, 0, 2)
                    ToggleIndicator.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
                end
                pcall(callback, isEnabled)
            end
            
            ToggleButton.MouseButton1Click:Connect(function()
                isEnabled = not isEnabled
                PlaySound("rbxassetid://131961136")
                UpdateToggle()
            end)
            
            UpdateToggle()
            
            return {
                SetState = function(state)
                    isEnabled = state
                    UpdateToggle()
                end
            }
        end
        
        function TabObject:CreateSlider(sliderText, minValue, maxValue, defaultValue, callback)
            sliderText = sliderText or "Slider"
            minValue = minValue or 0
            maxValue = maxValue or 100
            defaultValue = defaultValue or minValue
            callback = callback or function() end
            
            local SliderFrame = Instance.new("Frame")
            local SliderLabel = Instance.new("TextLabel")
            local SliderValueLabel = Instance.new("TextLabel")
            local SliderTrack = Instance.new("Frame")
            local SliderFill = Instance.new("Frame")
            local SliderButton = Instance.new("TextButton")
            
            SliderFrame.Name = "SliderFrame"
            SliderFrame.Parent = TabFrame
            SliderFrame.BackgroundColor3 = currentTheme.Primary
            SliderFrame.BorderSizePixel = 0
            SliderFrame.Size = UDim2.new(1, 0, 0, 50)
            
            local SliderCorner = Instance.new("UICorner")
            SliderCorner.CornerRadius = UDim.new(0, 4)
            SliderCorner.Parent = SliderFrame
            
            SliderLabel.Name = "Label"
            SliderLabel.Parent = SliderFrame
            SliderLabel.BackgroundTransparency = 1
            SliderLabel.Position = UDim2.new(0, 10, 0, 5)
            SliderLabel.Size = UDim2.new(1, -60, 0, 20)
            SliderLabel.Font = Enum.Font.SourceSansSemibold
            SliderLabel.Text = sliderText
            SliderLabel.TextColor3 = currentTheme.Text
            SliderLabel.TextSize = 14
            SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
            
            SliderValueLabel.Name = "ValueLabel"
            SliderValueLabel.Parent = SliderFrame
            SliderValueLabel.BackgroundTransparency = 1
            SliderValueLabel.Position = UDim2.new(1, -50, 0, 5)
            SliderValueLabel.Size = UDim2.new(0, 40, 0, 20)
            SliderValueLabel.Font = Enum.Font.SourceSansBold
            SliderValueLabel.Text = tostring(defaultValue)
            SliderValueLabel.TextColor3 = currentTheme.Accent
            SliderValueLabel.TextSize = 14
            SliderValueLabel.TextXAlignment = Enum.TextXAlignment.Right
            
            SliderTrack.Name = "Track"
            SliderTrack.Parent = SliderFrame
            SliderTrack.BackgroundColor3 = currentTheme.Secondary
            SliderTrack.BorderSizePixel = 0
            SliderTrack.Position = UDim2.new(0, 10, 0, 30)
            SliderTrack.Size = UDim2.new(1, -20, 0, 6)
            
            local TrackCorner = Instance.new("UICorner")
            TrackCorner.CornerRadius = UDim.new(0, 3)
            TrackCorner.Parent = SliderTrack
            
            SliderFill.Name = "Fill"
            SliderFill.Parent = SliderTrack
            SliderFill.BackgroundColor3 = currentTheme.Accent
            SliderFill.BorderSizePixel = 0
            SliderFill.Size = UDim2.new(0, 0, 1, 0)
            
            local FillCorner = Instance.new("UICorner")
            FillCorner.CornerRadius = UDim.new(0, 3)
            FillCorner.Parent = SliderFill
            
            SliderButton.Name = "Button"
            SliderButton.Parent = SliderTrack
            SliderButton.BackgroundTransparency = 1
            SliderButton.Size = UDim2.new(1, 0, 1, 0)
            SliderButton.Text = ""
            
            local currentValue = defaultValue
            local isDragging = false
            
            local function UpdateSlider(value)
                currentValue = math.clamp(value, minValue, maxValue)
                local percentage = (currentValue - minValue) / (maxValue - minValue)
                SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                SliderValueLabel.Text = tostring(math.floor(currentValue))
                pcall(callback, currentValue)
            end
            
            SliderButton.MouseButton1Down:Connect(function()
                isDragging = true
                PlaySound("rbxassetid://131961136")
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local percentage = math.clamp((Mouse.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1)
                    local value = minValue + (percentage * (maxValue - minValue))
                    UpdateSlider(value)
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = false
                end
            end)
            
            UpdateSlider(defaultValue)
        end
        
        function TabObject:CreateDropdown(dropdownText, options, callback)
            dropdownText = dropdownText or "Dropdown"
            options = options or {}
            callback = callback or function() end
            
            local DropdownFrame = Instance.new("Frame")
            local DropdownButton = Instance.new("TextButton")
            local DropdownLabel = Instance.new("TextLabel")
            local DropdownArrow = Instance.new("TextLabel")
            local DropdownList = Instance.new("ScrollingFrame")
            local ListLayout = Instance.new("UIListLayout")
            
            DropdownFrame.Name = "DropdownFrame"
            DropdownFrame.Parent = TabFrame
            DropdownFrame.BackgroundColor3 = currentTheme.Primary
            DropdownFrame.BorderSizePixel = 0
            DropdownFrame.Size = UDim2.new(1, 0, 0, 35)
            DropdownFrame.ClipsDescendants = true
            
            local DropdownCorner = Instance.new("UICorner")
            DropdownCorner.CornerRadius = UDim.new(0, 4)
            DropdownCorner.Parent = DropdownFrame
            
            DropdownButton.Name = "Button"
            DropdownButton.Parent = DropdownFrame
            DropdownButton.BackgroundTransparency = 1
            DropdownButton.Size = UDim2.new(1, 0, 0, 35)
            DropdownButton.Text = ""
            
            DropdownLabel.Name = "Label"
            DropdownLabel.Parent = DropdownButton
            DropdownLabel.BackgroundTransparency = 1
            DropdownLabel.Position = UDim2.new(0, 10, 0, 0)
            DropdownLabel.Size = UDim2.new(1, -30, 1, 0)
            DropdownLabel.Font = Enum.Font.SourceSansSemibold
            DropdownLabel.Text = dropdownText
            DropdownLabel.TextColor3 = currentTheme.Text
            DropdownLabel.TextSize = 14
            DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
            
            DropdownArrow.Name = "Arrow"
            DropdownArrow.Parent = DropdownButton
            DropdownArrow.BackgroundTransparency = 1
            DropdownArrow.Position = UDim2.new(1, -25, 0, 0)
            DropdownArrow.Size = UDim2.new(0, 20, 1, 0)
            DropdownArrow.Font = Enum.Font.SourceSansBold
            DropdownArrow.Text = "v"
            DropdownArrow.TextColor3 = currentTheme.Accent
            DropdownArrow.TextSize = 14
            
            DropdownList.Name = "List"
            DropdownList.Parent = DropdownFrame
            DropdownList.BackgroundTransparency = 1
            DropdownList.BorderSizePixel = 0
            DropdownList.Position = UDim2.new(0, 0, 0, 35)
            DropdownList.Size = UDim2.new(1, 0, 0, 0)
            DropdownList.ScrollBarThickness = 2
            DropdownList.ScrollBarImageColor3 = currentTheme.Accent
            DropdownList.ScrollingDirection = Enum.ScrollingDirection.Y
            DropdownList.CanvasSize = UDim2.new(0, 0, 0, 0)
            
            ListLayout.Parent = DropdownList
            ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            
            local isOpen = false
            
            -- Create option buttons
            for _, option in pairs(options) do
                local OptionButton = Instance.new("TextButton")
                OptionButton.Name = "Option"
                OptionButton.Parent = DropdownList
                OptionButton.BackgroundColor3 = currentTheme.Secondary
                OptionButton.BorderSizePixel = 0
                OptionButton.Size = UDim2.new(1, 0, 0, 30)
                OptionButton.Font = Enum.Font.SourceSans
                OptionButton.Text = option
                OptionButton.TextColor3 = currentTheme.Text
                OptionButton.TextSize = 14
                
                OptionButton.MouseButton1Click:Connect(function()
                    DropdownLabel.Text = dropdownText .. ": " .. option
                    pcall(callback, option)
                    PlaySound("rbxassetid://131961136")
                    
                    -- Close dropdown
                    isOpen = false
                    DropdownFrame.Size = UDim2.new(1, 0, 0, 35)
                    DropdownList.Size = UDim2.new(1, 0, 0, 0)
                    DropdownArrow.Text = "v"
                end)
                
                OptionButton.MouseEnter:Connect(function()
                    OptionButton.BackgroundColor3 = currentTheme.Accent
                end)
                
                OptionButton.MouseLeave:Connect(function()
                    OptionButton.BackgroundColor3 = currentTheme.Secondary
                end)
            end
            
            ListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                DropdownList.CanvasSize = UDim2.new(0, 0, 0, ListLayout.AbsoluteContentSize.Y)
            end)
            
            DropdownButton.MouseButton1Click:Connect(function()
                isOpen = not isOpen
                PlaySound("rbxassetid://131961136")
                
                if isOpen then
                    local listHeight = math.min(120, ListLayout.AbsoluteContentSize.Y)
                    DropdownFrame.Size = UDim2.new(1, 0, 0, 35 + listHeight)
                    DropdownList.Size = UDim2.new(1, 0, 0, listHeight)
                    DropdownArrow.Text = "^"
                else
                    DropdownFrame.Size = UDim2.new(1, 0, 0, 35)
                    DropdownList.Size = UDim2.new(1, 0, 0, 0)
                    DropdownArrow.Text = "v"
                end
            end)
        end
        
        function TabObject:Show()
            -- Hide all tabs
            for _, child in pairs(ItemContainer:GetChildren()) do
                if child:IsA("ScrollingFrame") then
                    child.Visible = false
                end
            end
            
            -- Reset all tab buttons
            for _, child in pairs(TabScroll:GetChildren()) do
                if child:IsA("TextButton") then
                    child.BackgroundColor3 = currentTheme.Primary
                    child.TextColor3 = currentTheme.Text
                end
            end
            
            -- Show this tab
            TabFrame.Visible = true
            TabButton.BackgroundColor3 = currentTheme.Accent
            TabButton.TextColor3 = currentTheme.IsLight and currentTheme.Primary or Color3.fromRGB(255, 255, 255)
        end
        
        return TabObject
    end
    
    -- Auto-update tab scroll canvas
    TabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        TabScroll.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y + 10)
    end)
    
    -- Make first tab active by default
    coroutine.wrap(function()
        wait()
        if TabScroll:FindFirstChildOfClass("TextButton") then
            TabScroll:FindFirstChildOfClass("TextButton"):MouseButton1Click()
        end
    end)()
    
    -- Window Methods
    function WindowObject:ChangeTheme(themeName)
        if Themes[themeName] then
            currentTheme = Themes[themeName]
            
            -- Update all elements
            MainFrame.BackgroundColor3 = currentTheme.Primary
            TopBar.BackgroundColor3 = currentTheme.Secondary
            Title.TextColor3 = currentTheme.Text
            ToggleButton.TextColor3 = currentTheme.Text
            TabContainer.BackgroundColor3 = currentTheme.Secondary
            ItemContainer.BackgroundColor3 = currentTheme.Secondary
            TabScroll.ScrollBarImageColor3 = currentTheme.Accent
            
            -- Update all tabs and their elements
            for _, tabButton in pairs(TabScroll:GetChildren()) do
                if tabButton:IsA("TextButton") then
                    tabButton.BackgroundColor3 = currentTheme.Primary
                    tabButton.TextColor3 = currentTheme.Text
                    
                    -- Find corresponding tab frame
                    local tabName = string.gsub(tabButton.Name, "Button", "")
                    local tabFrame = ItemContainer:FindFirstChild(tabName.."Frame")
                    if tabFrame then
                        tabFrame.ScrollBarImageColor3 = currentTheme.Accent
                        
                        -- Update all elements in the tab
                        for _, element in pairs(tabFrame:GetDescendants()) do
                            if element:IsA("TextButton") and element.Name == "Button" then
                                element.BackgroundColor3 = currentTheme.Primary
                                element.TextColor3 = currentTheme.Text
                            elseif element:IsA("TextLabel") then
                                element.TextColor3 = currentTheme.Text
                            elseif element:IsA("Frame") and element.Name == "ToggleFrame" then
                                element.BackgroundColor3 = currentTheme.Primary
                                element:FindFirstChild("Label").TextColor3 = currentTheme.Text
                                local toggleBtn = element:FindFirstChild("Button")
                                if toggleBtn then
                                    toggleBtn.BackgroundColor3 = currentTheme.Secondary
                                end
                            elseif element:IsA("Frame") and element.Name == "SliderFrame" then
                                element.BackgroundColor3 = currentTheme.Primary
                                element:FindFirstChild("Label").TextColor3 = currentTheme.Text
                                element:FindFirstChild("ValueLabel").TextColor3 = currentTheme.Accent
                                element:FindFirstChild("Track").BackgroundColor3 = currentTheme.Secondary
                                element:FindFirstChild("Fill").BackgroundColor3 = currentTheme.Accent
                            elseif element:IsA("Frame") and element.Name == "DropdownFrame" then
                                element.BackgroundColor3 = currentTheme.Primary
                                element:FindFirstChild("Button"):FindFirstChild("Label").TextColor3 = currentTheme.Text
                                element:FindFirstChild("Button"):FindFirstChild("Arrow").TextColor3 = currentTheme.Accent
                            end
                        end
                    end
                end
            end
            
            -- Update the currently active tab button
            for _, tabButton in pairs(TabScroll:GetChildren()) do
                if tabButton:IsA("TextButton") and tabButton.BackgroundColor3 == currentTheme.Accent then
                    tabButton.TextColor3 = currentTheme.IsLight and currentTheme.Primary or Color3.fromRGB(255, 255, 255)
                end
            end
        end
    end
    
    function WindowObject:SetPosition(position)
        MainFrame.Position = position
    end
    
    function WindowObject:SetSize(size)
        MainFrame.Size = size
    end
    
    function WindowObject:Toggle()
        ToggleButton:MouseButton1Click()
    end
    
    function WindowObject:Destroy()
        ScreenGui:Destroy()
    end
    
    return WindowObject
end

return Library
